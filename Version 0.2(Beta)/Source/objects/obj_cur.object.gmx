<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>drag = false
drag_x_start = 0
drag_y_start = 0
drag_width = 0
drag_height = 0

target = noone
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if collision_point(mouse_x,mouse_y,obj_win_tools,0,0)
{
    drag = 0
    exit
}
if (drag) and (target != noone)
{
    if (drag_width &lt; 32) or (drag_height &lt; 32)
    {
        //target = noone
        drag = 0
        exit
    }
    ID = instance_create(drag_x_start, drag_y_start, target)
    if (target == obj_CheckBox) or (target == obj_Button)
    {
        target = noone
        drag = 0
        exit
    }
    ID.image_xscale = (drag_width)  / ID.sprite_width
    ID.image_yscale = (drag_height) / ID.sprite_height
    
    switch(target)
    {
        case obj_Button:
            break
        case obj_CheckBox:
            break
        case obj_ListBox:
            break
        case obj_TextBox:
            textbox_update(ID)
            break
        case obj_Label:
            break
        case obj_Panel:
            break
        case obj_Window:
            window_update(ID)
            break
    }
    
    //ID.sprite_width = ID.image_yscale*32
    target = noone
}
//drag = 0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if collision_point(mouse_x,mouse_y,obj_win_tools,0,0) exit
drag = 1
drag_x_start = mouse_x
drag_y_start = mouse_y
drag_width = 0
drag_height = 0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (drag) and (target != noone)
{
    if (mouse_x &lt; drag_x_start) or (mouse_y &lt; drag_y_start)
    {
        exit
    }
    
    draw_set_color( make_color_rgb(200,200,200))
    drag_width = mouse_x - drag_x_start 
    drag_height = mouse_y - drag_y_start
    draw_rectangle(drag_x_start, drag_y_start, drag_x_start+drag_width, drag_y_start+drag_height, false)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
