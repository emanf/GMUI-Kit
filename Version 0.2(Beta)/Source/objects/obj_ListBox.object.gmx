<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_def</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Properties
control_type = "ListBox"            // Don't Change
_start_index = 0                    // Don't Change
_sel_index = 1                      // Don't Change
//endIndex = SNum + startIndex - 1  // Don't Change
key_on = true                       // Don't Change

items = ds_list_create();           //Create List of Items.

focus = 0                           // Focus
delay = 5                           // based of Room Speed for Keyboad Up&amp;Down Key.

//
control_width  = sprite_width
control_height = sprite_height

// Skin
skin_sprite = spr_sTextBox                  // set noone to draw default sprite(sprite_index);
skin_back_color = make_color_rgb(25,25,25)  // set background color if u use skin.

// Owner
owner = noone                       //can be a obj_Window or obj_Panel
x_owner = 0                         //child x on owner
y_owner = 0                         //child y on owner

// Font
text_color = c_white
text_alpha = 0.5
font = fo_arial12                    //Sets the font. Use -1 to set the default font (Arial 12).
font_halign = fa_left                //Sets the horizontal alignment. Choose one of: fa_left , fa_center , fa_right
font_valign = fa_top                 //Sets the vertical alignment. Choose one of: fa_top , fa_middle , fa_bottom 

// Set Font
draw_set_font(font)
draw_set_halign(font_halign)
draw_set_valign(font_valign)

x_move = 3
y_move = 3
height_item = string_height("A") + 2    // set Heigth of item in ListBox .if u wanna change it, so go to Draw Event and delete some code like this.
width_item = sprite_width - x_move      // set Width of item in ListBox.

size = ds_list_size(items)                                      // Number of Items.
show_number = floor((sprite_height-(2*y_move))/  height_item)   // Number of Items to Show.

//selected_item_index = 0
//selected_item_value = ""
listbox_update(id)                      // Set Default to 'selected_item_index' Variable and 'selected_item_value' Variable.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Example List

//exit
//start

for (i=0;i&lt;20;i++)
{

    listbox_add_item(id, i)
    
}
//end;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Enable Down and Up Key.
key_on = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="40">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move To Down in ListBox
if (owner) 
{
    if !(owner.visible) exit;
}
if !(visible) exit;

if (focus)
{
    if (key_on)
    {
        key_on = false
        _sel_index += 1
        if (show_number &gt; size)
        {
            n = size
        }
        else
        {
            n = show_number
        }
        if (_sel_index &gt; n)
        {
            _sel_index = n
            if (_start_index &lt; size-n) _start_index+=1
        }
        alarm[0] = delay
    }
}

listbox_update(id)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move To Up in ListBox
if (owner) 
{
    if !(owner.visible) exit;
}
if !(visible) exit;

if (focus)
{
    if (key_on)
    {
        key_on = false
        _sel_index -= 1
        if (_sel_index &lt; 1)
        {
            _sel_index = 1
            if (_start_index &gt; 0) _start_index-=1
        }
        alarm[0] = delay
    }
    
}

listbox_update(id)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move To Down in ListBox
if (owner) 
{
    if !(owner.visible) exit;
}
if !(visible) exit;

key_on = true
event_perform(ev_keyboard, vk_down)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move To Up in ListBox
if (owner) 
{
    if !(owner.visible) exit;
}
if !(visible) exit;

key_on = true
event_perform(ev_keyboard, vk_up)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// lose Focus
if (owner) 
{
    if !(owner.visible) exit;
}
if !(visible) exit;

if !collision_point(mouse_x, mouse_y, id, 0, 0)
{
    focus = 0
}
listbox_update(id)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Focus and Select Item.
if (owner) 
{
    if !(owner.visible) exit;
}
if !(visible) exit;

focus = 1;
//_x = mouse_x - x
_y = mouse_y - y

if (show_number &gt; size)
{
    n = size
}
else
{
    n = show_number
}

for (i=0; i&lt;n; i+=1)
{
    if (_y &gt;= i*height_item+y_move) and (_y &lt;= (i+1)*height_item+y_move-1)
    {
        _sel_index = i+1
        exit;
    }
}
listbox_update(id)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw ListBox
if (owner)
{
    if !(owner.visible)
    {
        exit;
    }
    x = x_owner + owner.x
    y = y_owner + owner.y
}

// Update
control_width  = sprite_width
control_height = sprite_height

if (skin_sprite)
{
    __w = sprite_get_width(skin_sprite)/3
    __h = sprite_get_height(skin_sprite)/3
    _xs = (sprite_width -(2*__w)+1) / __w
    _ys = (sprite_height-(2*__h)+1) / __h
    
    // Draw Background Color
    _c = draw_get_color()
    draw_set_color(skin_back_color)
    draw_rectangle(x+__w,y+__h,x+sprite_width-(__w),y+sprite_height-(__h),false)
    draw_set_color(_c)
    
    // Draw Top Border
    draw_sprite_part_ext(skin_sprite,0,__w,0,__w,__h,x+__w,y,_xs,1,c_white,1)
    
    // Draw Bottom Border
    draw_sprite_part_ext(skin_sprite,0,__w,__h*2,__w,__h,x+__w,y+sprite_height-__h+1,_xs,1,c_white,1)
    
    // Draw Left Border
    draw_sprite_part_ext(skin_sprite,0,0,__h,__w,__h,x,y+__h,1,_ys,c_white,1)
    
    // Draw Right Border
    draw_sprite_part_ext(skin_sprite,0,__w*2,__h,__w,__h,x+sprite_width-__w+1,y+__h,1,_ys,c_white,1)
    
    // Draw Corners of Window
    draw_sprite_part_ext(skin_sprite,0,0,0,__w,__h,x,y,1,1,c_white,1)
    draw_sprite_part_ext(skin_sprite,0,0,__h*2,__w,__h,x,y+sprite_height-__h+1,1,1,c_white,1)
    draw_sprite_part_ext(skin_sprite,0,__w*2,0,__w,__h,x+sprite_width-__w+1,y,1,1,c_white,1)
    draw_sprite_part_ext(skin_sprite,0,__w*2,__h*2,__w,__h,x+sprite_width-__w+1,y+sprite_height-__h+1,1,1,c_white,1)
    
}
else
{
    draw_self()
}

if (size ==0) exit;

draw_set_font(font)
draw_set_halign(font_halign)
draw_set_valign(font_valign)
height_item = string_height("A") + 2        // Delete this line if u change 'height_item' in Create Event.
width_item = sprite_width - x_move

draw_set_alpha(1)
show_number = floor((sprite_height-(2*y_move))/  height_item)   // Number of Items to Show.
if (show_number &gt; size)
{
    n = size
}
else
{
    n = show_number
}

if (_start_index &lt; 0)     _start_index = 0
if (_sel_index &lt; 1)       _sel_index = 1
if (_sel_index &gt; n)       _sel_index = n
if (_start_index &gt; size - _sel_index)
{
    _start_index = size - _sel_index
}
for (i=0; i&lt;n; i+=1)
{
    _temp_str = string(ds_list_find_value(items,i+_start_index))
    if string_width(_temp_str) &gt; ((width_item-6)-(x_move))
    {
        for (j=string_length(_temp_str); j&gt;=0;j-=1)
        {
            _temp = string_copy(_temp_str,0,j)
            if (string_width(_temp+"...") &lt;= ((width_item-6)-(x_move)))
            {
                _temp_str = _temp+"..."
                break
            }
        }
        
    }
    draw_text_color(x+5+x_move,y+(i*height_item)+y_move,_temp_str, text_color, text_color, text_color, text_color, text_alpha)
}
if (focus == 1)
{
    draw_set_color(make_color_rgb(59,59,59))
    draw_set_alpha(0.60)
}
else
{
    draw_set_color(make_color_rgb(59,59,59))
    draw_set_alpha(0.30)
}
draw_rectangle(x+x_move,y+y_move+(_sel_index*height_item)-height_item,x+width_item-1,y+y_move+(_sel_index*height_item)-1,0)
draw_set_alpha(1)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>123,123</point>
  </PhysicsShapePoints>
</object>
