<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_def</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Properties
control_type = "TextBox"     // Don't Change
_caret = ''                  // Variable Use in Script. Don't Change
_ch = 0                      // Variable Use in Script. Don't Change

// Skin
skin_sprite = spr_sTextBox                  // set noone to draw default sprite(sprite_index);
skin_back_color = make_color_rgb(25,25,25)  // set background color if u use skin.

//
control_width  = sprite_width
control_height = sprite_height

// Owner
owner = noone           //can be a obj_Window or obj_Panel
x_owner = 0             //child x on owner
y_owner = 0             //child y on owner

// Font
font = fo_arial12               // Sets the font. Use -1 to set the default font (Arial 12).
font_halign = fa_left   // Sets the horizontal alignment. Choose one of: fa_left , fa_center , fa_right
font_valign = fa_top    // Sets the vertical alignment. Choose one of: fa_top , fa_middle , fa_bottom 

// Set Font
draw_set_font(font)
draw_set_halign(font_halign)
draw_set_valign(font_valign)

// ChangeAble
caret_char = "|"
focus = 0
text = "TextBox"
text_color = c_white
text_alpha = 0.5
text_limit = 60
x_move = 5
y_move = 5
text_width_limit = sprite_width - x_move*2

alarm[0] = 15           // Caret Changer.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Caret Changer
if (_caret == "")
{
    _caret = caret_char
}
else
{
    _caret = ""
}

alarm[0] = 15       //Change Caret every 15 step.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
if (owner)
{
    if !(owner.visible)
    {
        exit;
    }
    x = x_owner + owner.x
    y = y_owner + owner.y
}

// Update
control_width  = sprite_width
control_height = sprite_height

if (skin_sprite)
{    
    __w = sprite_get_width(skin_sprite)/3
    __h = sprite_get_height(skin_sprite)/3
    _xs = (sprite_width -(2*__w)+1) / __w
    _ys = (sprite_height-(2*__h)+1) / __h
    
    // Draw Background Color
    _c = draw_get_color()
    draw_set_color(skin_back_color)
    draw_rectangle(x+__w,y+__h,x+sprite_width-(__w),y+sprite_height-(__h),false)
    draw_set_color(_c)
    
    // Draw Top Border
    draw_sprite_part_ext(skin_sprite,0,__w,0,__w,__h,x+__w,y,_xs,1,c_white,1)
    
    // Draw Bottom Border
    draw_sprite_part_ext(skin_sprite,0,__w,__h*2,__w,__h,x+__w,y+sprite_height-__h+1,_xs,1,c_white,1)
    
    // Draw Left Border
    draw_sprite_part_ext(skin_sprite,0,0,__h,__w,__h,x,y+__h,1,_ys,c_white,1)
    
    // Draw Right Border
    draw_sprite_part_ext(skin_sprite,0,__w*2,__h,__w,__h,x+sprite_width-__w+1,y+__h,1,_ys,c_white,1)
    
    // Draw Corners of Window
    draw_sprite_part_ext(skin_sprite,0,0,0,__w,__h,x,y,1,1,c_white,1)
    draw_sprite_part_ext(skin_sprite,0,0,__h*2,__w,__h,x,y+sprite_height-__h+1,1,1,c_white,1)
    draw_sprite_part_ext(skin_sprite,0,__w*2,0,__w,__h,x+sprite_width-__w+1,y,1,1,c_white,1)
    draw_sprite_part_ext(skin_sprite,0,__w*2,__h*2,__w,__h,x+sprite_width-__w+1,y+sprite_height-__h+1,1,1,c_white,1)
    
}
else
{
    draw_self()
}

draw_set_alpha(1);
draw_set_font(font)
draw_set_halign(font_halign)
draw_set_valign(font_valign)

if (focus == 1)
{
    if keyboard_check_pressed(vk_enter) focus =0
    if (_ch == 0)
    {
        keyboard_string = text
        _ch = 1
    }
    if string_length(keyboard_string) &gt; text_limit keyboard_string = string_copy(keyboard_string,0,text_limit)
    if string_width(keyboard_string) &gt; text_width_limit
    {
        for (i=string_length(keyboard_string); i&gt;=0;i-=1)
        {
            _temp = string_copy(keyboard_string,0,i)
            if string_width(_temp) &lt;= text_width_limit
            {
                keyboard_string = _temp
                break
            }
        }
        
    }
    draw_text_color(x+x_move,y+y_move,keyboard_string+_caret,text_color, text_color, text_color, text_color, text_alpha)
    text = keyboard_string
    
    if !collision_point(mouse_x, mouse_y, id, 0, 0)
    {
    if mouse_check_button_pressed(mb_left)
        {
            focus = 0
            _ch = 0
        }
    }
}
else
{
    if collision_point(mouse_x, mouse_y, id, 0, 0)
    {
        //window_set_cursor(cr_beam)
        if mouse_check_button_pressed(mb_left)
        {
            focus = 1
            _ch = 0
        }
    }
    else
    {
        //window_set_cursor(cr_arrow)
    }
    if (_ch != 0) _ch = 0
    draw_text_color(x+x_move,y+y_move,text,text_color, text_color, text_color, text_color, text_alpha)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>201,201</point>
  </PhysicsShapePoints>
</object>
