<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_def</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Properties
control_type = "Panel"          // Dont Change!
_vis = 1                        // Dont Change! 

//
control_width  = sprite_width
control_height = sprite_height

// Owner
owner = noone                   //can be a obj_Window or obj_Panel
x_owner = 0                     //child x on owner
y_owner = 0                     //child y on owner

gap = 0                                // gap between childs
childs_width  = 30                      // width of childs
childs_height = 30                      // height of childs
item_scale_mode = true                  // true or false, if true: childs_width and childs_height changed to bigget width and height of childs.
item_alignment = ALIGNMENT_BOTH   //Choose one of: ALIGNMENT_HORIZONTAL, ALIGNMENT_BOTH, ALIGNMENT_VERTICAL

// Border
border_show = true
border_color = make_color_rgb(25,25,25)
border_width = 2


// create childs list
childs = ds_list_create()


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Example

// add some child
/*
ID = panel_add_child(id,obj_Button)
ID.image_xscale = 0.25
ID.text = ""
button_update(ID)

ID = panel_add_child(id,obj_Button)
ID.image_xscale = 0.25
ID.text = ""
button_update(ID)

ID = panel_add_child(id,obj_Button)
ID.image_xscale = 0.25
ID.text = ""
button_update(ID)
*/


panel_add_child(id,obj_Button)
panel_add_child(id,obj_Button)
panel_add_child(id,obj_Button)
panel_add_child(id,obj_Button)
panel_add_child(id,obj_Button)
panel_add_child(id,obj_Button)
panel_add_child(id,obj_Button)
panel_add_child(id,obj_Button)
panel_add_child(id,obj_Button)
panel_add_child(id,obj_Button)

panel_update(id)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw

// Check enable(visible)
if (not visible)
{
    if (_vis == 0) exit
    size = ds_list_size(childs)
    for (i=0; i&lt;size; i++)
    {
        child = ds_list_find_value(childs,i)
        child.visible = false
    }
    _vis = 0
    exit
}

// Update
control_width  = sprite_width
control_height = sprite_height

if (owner)
{
    if !(owner.visible)
    {
        if (_vis == 0) exit
        size = ds_list_size(childs)
        for (i=0; i&lt;size; i++)
        {
            child = ds_list_find_value(childs,i)
            child.visible = false
        }
        _vis = 0
        exit
    }
    x = x_owner + owner.x
    y = y_owner + owner.y
}


_vis = 1
size = ds_list_size(childs)

// Draw sprite of panel
//draw_self()

// Draw border of panel
if (border_show)
{
    draw_line_width_color(x-border_width,y-border_width,x+sprite_width+border_width,y-border_width,border_width,border_color,border_color)
    draw_line_width_color(x-border_width,y-border_width,x-border_width,y+sprite_height+border_width,border_width,border_color,border_color)
    draw_line_width_color(x+sprite_width+border_width,y-border_width,x+sprite_width+border_width,y+sprite_height+border_width,border_width,border_color,border_color)
    draw_line_width_color(x-border_width,y+sprite_height+border_width,x+sprite_width+border_width,y+sprite_height+border_width,border_width,border_color,border_color)
    //draw_rectangle(x,y,x+sprite_width,y+sprite_height,true)
}

_childs_width = childs_width+gap
_childs_height = childs_height+gap

num_in_hor = floor((sprite_width+gap) /_childs_width)
if (num_in_hor&gt;size) num_in_hor = size
if (item_alignment = ALIGNMENT_VERTICAL) num_in_hor = 1
if (num_in_hor != 0)
{
    num_in_ver = ceil(size/num_in_hor)
}
else
{
    num_in_ver = 0
}
if (num_in_ver&gt;((sprite_height+gap)/_childs_height)) num_in_ver=((sprite_height+gap)/_childs_height)
if (item_alignment = ALIGNMENT_HORIZONTAL) num_in_ver = 1
_x = 0
_y = 0
_num = 0
for (i=0; i&lt;=num_in_ver-1; i++)
{
    _x = 0
    for (j=0; j&lt;=num_in_hor-1; j++)
    {
        _num +=1
        if _num&gt;size break;
        child = ds_list_find_value(childs,_num-1)
        if (child == noone) continue
        child.x_owner = _x+(j*childs_width)
        child.y_owner = _y+(i*childs_height)
        child.visible = true
        
        // Draw template of item
        //draw_set_color(c_white)
        //draw_rectangle(x+_x+(j*childs_width),y+_y+(i*childs_height),x+_x+(j*childs_width)+childs_width,y+_y+(i*childs_height)+childs_height,false)
        
        // Draw border of item
        //draw_set_color(c_black)
        //draw_rectangle(x+_x+(j*childs_width),y+_y+(i*childs_height),x+_x+(j*childs_width)+childs_width,y+_y+(i*childs_height)+childs_height,true)
        _x += gap
    }
    _y += gap 
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
